name: Build and Test x86_64 Docker Image

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: mcp-speech-to-text

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
    
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix=sha-,suffix=-${{ matrix.platform }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: ${{ matrix.platform }}
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  test-x86_64:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: contains(github.event.head_commit.message, '[test-x86_64]') || github.event_name == 'release'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build test image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64
        load: true
        tags: test-image:latest
        cache-from: type=gha

    - name: Test x86_64 functionality
      run: |
        echo "üß™ Testing x86_64 Docker image functionality..."
        
        # Test Python imports
        docker run --rm --platform linux/amd64 test-image:latest python -c "
        import sys
        print(f'Python version: {sys.version}')
        
        # Test Vosk
        try:
            import vosk
            print('‚úÖ Vosk imported successfully')
        except ImportError as e:
            print(f'‚ùå Vosk import failed: {e}')
            exit(1)
        
        # Test SpeechRecognition
        try:
            import speech_recognition
            print('‚úÖ SpeechRecognition imported successfully')
        except ImportError as e:
            print(f'‚ùå SpeechRecognition import failed: {e}')
            exit(1)
        
        # Test MCP
        try:
            from mcp.server import Server
            print('‚úÖ MCP imported successfully')
        except ImportError as e:
            print(f'‚ùå MCP import failed: {e}')
            exit(1)
        
        # Test server creation
        try:
            from src.mcp_speech_to_text.server import OfflineSpeechToTextServer
            server = OfflineSpeechToTextServer()
            print('‚úÖ Server created successfully')
        except Exception as e:
            print(f'‚ùå Server creation failed: {e}')
            exit(1)
        
        print('üéâ All x86_64 tests passed!')
        "

    - name: Test Vosk model loading
      run: |
        echo "üß™ Testing Vosk model loading on x86_64..."
        docker run --rm --platform linux/amd64 test-image:latest python -c "
        import os
        import vosk
        
        # Check if model exists
        model_path = '/app/src/mcp_speech_to_text/models/vosk-model-small-en-us-0.15'
        if os.path.exists(model_path):
            print(f'‚úÖ Model found at: {model_path}')
            try:
                model = vosk.Model(model_path)
                print('‚úÖ Vosk model loaded successfully')
                
                rec = vosk.KaldiRecognizer(model, 16000)
                print('‚úÖ Speech recognizer initialized')
                print('üéâ Offline speech recognition ready!')
            except Exception as e:
                print(f'‚ùå Model loading failed: {e}')
                exit(1)
        else:
            print(f'‚ùå Model not found at: {model_path}')
            exit(1)
        "

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
